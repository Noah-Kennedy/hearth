---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mastodon-nginx
  name: mastodon-nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mastodon-nginx
  template:
    metadata:
      labels:
        app: mastodon-nginx
    spec:
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          nodeTaintsPolicy: Honor
          labelSelector:
            matchLabels:
              app: mastodon-nginx
      containers:
        - image: nginx:1.27-bookworm
          name: mastodon-nginx
          ports:
            - containerPort: 80
              name: http-web
              protocol: TCP
            - containerPort: 443
              name: https-web
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /nginx-health
              httpHeaders:
                - name: Host
                  value: mastodon.despise.computer
              port: 80
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          resources:
            limits:
              cpu: 300m
              memory: 48Mi
            requests:
              cpu: 200m
              memory: 32Mi
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
            - name: nginx-mastodon-config
              mountPath: /etc/nginx/sites-enabled/mastodon
              subPath: mastodon.conf
              readOnly: true
            - name: creds
              mountPath: /etc/proxy-certs/
              readOnly: true
            - name: cache
              mountPath: /var/cache/nginx
              readOnly: false

      volumes:
        - name: creds
          secret:
            secretName: mastodon-nginx-cert
            items:
              - key: cert
                path: cert.pem
              - key: key
                path: key.pem
        - name: nginx-config
          configMap:
            name: mastodon-nginx
        - name: nginx-mastodon-config
          configMap:
            name: mastodon-nginx-inner
        - name: cache
          emptyDir:
            sizeLimit: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: mastodon-nginx
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: http-web
      name: http-web
    - port: 443
      protocol: TCP
      targetPort: https-web
      name: https-web
  selector:
    app: mastodon-nginx
  sessionAffinity: None
  type: LoadBalancer

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mastodon-nginx
data:
  nginx.conf: |
    user  nginx;
    worker_processes  auto;
    error_log  /var/log/nginx/error.log notice;
    pid        /var/run/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
        access_log  /var/log/nginx/access.log  main;
        sendfile        on;
        #tcp_nopush     on;
        keepalive_timeout  65;
        #gzip  on;
        include /etc/nginx/sites-enabled/*;
        include /etc/nginx/conf.d/*.conf;
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mastodon-nginx-inner
data:
  mastodon.conf: |
    map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
    }

    upstream backend {
        least_conn;
        server mastodon-web:3000 fail_timeout=0;
    }

    upstream streaming {
        least_conn;
        server mastodon-streaming:4000 fail_timeout=0;
    }

    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=CACHE:10m inactive=1d max_size=1g;

    server {
      listen 80;
      listen [::]:80;
      server_name mastodon.despise.computer;
      root /usr/share/nginx/html;
      location /.well-known/acme-challenge/ { allow all; }
      location = /nginx-health {
        access_log off;
        add_header 'Content-Type' 'application/json';
        return 200 '{"status":"UP"}';
      }
      location /health {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Proxy "";
        proxy_pass_header Server;

        proxy_pass http://backend;
        proxy_buffering on;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        proxy_no_cache 1;
        proxy_cache_bypass 1;

        tcp_nodelay on;
      }
      location / { return 301 https://$host$request_uri; }
    }

    server {
      listen 443 ssl http2;
      listen [::]:443 ssl http2;

      server_name mastodon.despise.computer;

      ssl_protocols TLSv1.2 TLSv1.3;

      # You can use https://ssl-config.mozilla.org/ to generate your cipher set.
      # We recommend their "Intermediate" level.
      ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;

      ssl_prefer_server_ciphers on;
      ssl_session_cache shared:SSL:10m;
      ssl_session_tickets off;

      # Uncomment these lines once you acquire a certificate:
      ssl_certificate     /etc/proxy-certs/cert.pem;
      ssl_certificate_key /etc/proxy-certs/key.pem;

      keepalive_timeout    70;
      sendfile             on;
      client_max_body_size 99m;

      root /usr/share/nginx/html;

      gzip on;
      gzip_disable "msie6";
      gzip_vary on;
      gzip_proxied any;
      gzip_comp_level 6;
      gzip_buffers 16 8k;
      gzip_http_version 1.1;
      gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml image/x-icon;

      location = /nginx-health {
        access_log off;
        add_header 'Content-Type' 'application/json';
        return 200 '{"status":"UP"}';
      }

      location / {
        try_files $uri @proxy;
      }

      location /health {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Proxy "";
        proxy_pass_header Server;

        proxy_pass http://backend;
        proxy_buffering on;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        proxy_no_cache 1;
        proxy_cache_bypass 1;

        tcp_nodelay on;
      }

      # If Docker is used for deployment and Rails serves static files,
      # then needed must replace line `try_files $uri =404;` with `try_files $uri @proxy;`.
      location = /sw.js {
        add_header Cache-Control "public, max-age=604800, must-revalidate";
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains";
        try_files $uri @proxy;
      }

      location ~ ^/assets/ {
        add_header Cache-Control "public, max-age=2419200, must-revalidate";
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains";
        try_files $uri @proxy;
      }

      location ~ ^/avatars/ {
        add_header Cache-Control "public, max-age=2419200, must-revalidate";
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains";
        try_files $uri @proxy;
      }

      location ~ ^/emoji/ {
        add_header Cache-Control "public, max-age=2419200, must-revalidate";
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains";
        try_files $uri @proxy;
      }

      location ~ ^/headers/ {
        add_header Cache-Control "public, max-age=2419200, must-revalidate";
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains";
        try_files $uri @proxy;
      }

      location ~ ^/packs/ {
        add_header Cache-Control "public, max-age=2419200, must-revalidate";
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains";
        try_files $uri @proxy;
      }

      location ~ ^/shortcuts/ {
        add_header Cache-Control "public, max-age=2419200, must-revalidate";
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains";
        try_files $uri @proxy;
      }

      location ~ ^/sounds/ {
        add_header Cache-Control "public, max-age=2419200, must-revalidate";
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains";
        try_files $uri @proxy;
      }

      location ~ ^/system/ {
        add_header Cache-Control "public, max-age=2419200, immutable";
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains";
        add_header X-Content-Type-Options nosniff;
        add_header Content-Security-Policy "default-src 'none'; form-action 'none'";
        try_files $uri @proxy;
      }

      location ^~ /api/v1/streaming {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Proxy "";

        proxy_pass http://streaming;
        proxy_buffering off;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains";

        tcp_nodelay on;
      }

      location @proxy {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Proxy "";
        proxy_pass_header Server;

        proxy_pass http://backend;
        proxy_buffering on;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        proxy_cache CACHE;
        proxy_cache_valid 200 7d;
        proxy_cache_valid 410 24h;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        add_header X-Cached $upstream_cache_status;

        tcp_nodelay on;
      }

      error_page 404 500 501 502 503 504 /500.html;
    }
